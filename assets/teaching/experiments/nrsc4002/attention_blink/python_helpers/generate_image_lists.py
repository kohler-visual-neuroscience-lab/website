#!/usr/bin/env python3
"""
generate_image_lists.py

Scans the following folders (relative to --base):
  - shape_stimuli/targets
  - shape_stimuli/distractors
  - texture_stimuli/targets
  - texture_stimuli/distractors

Then writes an ES module `images_stimulus.js` that exports:
  - shape_targets, shape_distractors
  - texture_targets, texture_distractors
and a default export containing all four.

Usage:
  python generate_image_lists.py --base . --out images_stimulus.js

Notes:
  * Images are listed recursively with natural (human-friendly) sorting.
  * Paths in the JS file are relative to --base and use forward slashes.
"""

import argparse
import re
from pathlib import Path
from typing import List, Dict

IMAGE_EXTS = {".png", ".jpg", ".jpeg", ".gif", ".bmp", ".webp", ".svg"}

def natural_key(s: str):
    """Human-friendly sort: file2 before file10."""
    return [int(t) if t.isdigit() else t.lower() for t in re.findall(r"\d+|\D+", s)]

def list_images_relative(folder: Path, base: Path) -> List[str]:
    """
    List image files under `folder` (recursively), return POSIX-style paths
    relative to `base`, naturally sorted.
    """
    if not folder.exists():
        return []
    files = [p for p in folder.rglob("*") if p.is_file() and p.suffix.lower() in IMAGE_EXTS]
    # Sort by relative POSIX path with natural ordering
    files.sort(key=lambda p: natural_key(p.relative_to(base).as_posix()))
    return [p.relative_to(base).as_posix() for p in files]

def js_array(name: str, items: List[str]) -> str:
    body = ",\n  ".join(f'"{s}"' for s in items)
    return f"export const {name} = [\n  {body}\n];\n"

def create_images_stimulus_js(base_dir: str = ".", output_filename: str = "images_stimulus.js") -> Path:
    """
    Build images_stimulus.js from the expected folder layout.
    Returns the output file Path.
    """
    base = Path(base_dir).resolve()

    layout: Dict[str, Dict[str, Path]] = {
        "shape": {
            "targets":     base / "shape_stimuli" / "targets",
            "distractors": base / "shape_stimuli" / "distractors",
        },
        "texture": {
            "targets":     base / "texture_stimuli" / "targets",
            "distractors": base / "texture_stimuli" / "distractors",
        },
    }

    gathered = {}
    for kind, sub in layout.items():
        for cat, folder in sub.items():
            gathered[f"{kind}_{cat}"] = list_images_relative(folder, base)

    banner = (
        "// Auto-generated by generate_image_lists.py\n"
        "// Scanned folders:\n"
        "//   - shape_stimuli/targets, shape_stimuli/distractors\n"
        "//   - texture_stimuli/targets, texture_stimuli/distractors\n"
        "// Re-run this script after changing images.\n\n"
        '"use strict";\n\n'
    )

    sections = []
    sections.append(js_array("shape_targets", gathered["shape_targets"]))
    sections.append(js_array("shape_distractors", gathered["shape_distractors"]))
    sections.append(js_array("texture_targets", gathered["texture_targets"]))
    sections.append(js_array("texture_distractors", gathered["texture_distractors"]))

    default_export = (
        "\nexport default { "
        "shape_targets, shape_distractors, texture_targets, texture_distractors "
        "};\n"
    )

    js_content = banner + "\n".join(sections) + default_export

    out_path = Path(base_dir).resolve() / output_filename
    out_path.write_text(js_content, encoding="utf-8")

    # Console feedback
    missing = [
        name for name, folder in [
            ("shape_stimuli/targets", layout["shape"]["targets"]),
            ("shape_stimuli/distractors", layout["shape"]["distractors"]),
            ("texture_stimuli/targets", layout["texture"]["targets"]),
            ("texture_stimuli/distractors", layout["texture"]["distractors"]),
        ]
        if not folder.exists()
    ]
    if missing:
        print("Note: Missing folders (JS will contain empty arrays):", ", ".join(missing))

    for key, items in gathered.items():
        print(f"{key}: {len(items)} file(s)")

    print(f"Wrote {out_path}")
    return out_path

def main():
    parser = argparse.ArgumentParser(description="Generate images_stimulus.js from stimuli folders.")
    parser.add_argument("--base", default=".", help="Base directory containing *_stimuli folders (default: .)")
    parser.add_argument("--out", default="images_stimulus.js", help="Output JS file name (default: images_stimulus.js)")
    args = parser.parse_args()

    create_images_stimulus_js(args.base, args.out)

if __name__ == "__main__":
    main()
